Шифровщик
function caesarEncrypt(text, shift) {
Определяем функцию caesarEncrypt, которая принимает два параметра: text (строка, которую нужно зашифровать) и shift (количество позиций для сдвига букв).
    return text.split('').map(char => {
Разбиваем входной текст на массив символов с помощью метода split(''). Затем применяем метод map, который позволяет преобразовать каждый символ в массиве.
        if (char.match(/[a-z]/i)) {
Проверяем, является ли текущий символ буквой (независимо от регистра) с помощью регулярного выражения /[a-z]/i. Если это так, выполняем следующие шаги.
            const code = char.charCodeAt();
Получаем код символа в формате Unicode с помощью метода charCodeAt(). Это позволяет нам работать с числовым представлением буквы.
            const base = char.toLowerCase() === char ? 97 : 65; // a=97, A=65
Определяем базовый код для сдвига. Если символ — строчная буква (например, 'a'), то базовый код равен 97 (код 'a'). Если заглавная буква (например, 'A'), то базовый код равен 65 (код 'A').
            return String.fromCharCode(((code - base + shift) % 26) + base);
Рассчитываем новый код символа после сдвига:
Вычитаем базовый код из кода символа (code - base), чтобы привести его к диапазону от 0 до 25.
Добавляем значение сдвига (+ shift).
Используем оператор остатка (% 26), чтобы обеспечить циклический переход в пределах алфавита.
Восстанавливаем окончательный код символа, добавляя базовый код обратно (+ base).
Преобразуем полученный код обратно в символ с помощью String.fromCharCode().
        }
        return char; // Не изменяем символы, не относящиеся к алфавиту
    }).join('');
}
Если текущий символ не является буквой, просто возвращаем его без изменений.
После завершения обработки всех символов объединяем их обратно в строку с помощью метода join('') и возвращаем зашифрованный текст.
Дешифровщик с подбором ключа
function caesarDecryptWithBruteForce(ciphertext) {
    const possibleDecryptedTexts = [];
Определяем функцию caesarDecryptWithBruteForce, которая принимает зашифрованный текст (ciphertext) и создает пустой массив для хранения возможных расшифрованных текстов.
    for (let shift = 1; shift < 26; shift++) {
Запускаем цикл от 1 до 25 включительно. Мы пробуем все возможные значения сдвига для расшифровки текста.
        const decryptedText = ciphertext.split('').map(char => {
Разбиваем зашифрованный текст на массив символов и применяем метод map, чтобы преобразовать каждый символ.
            if (char.match(/[a-z]/i)) {
Проверяем, является ли текущий символ буквой.
                const code = char.charCodeAt();
                const base = char.toLowerCase() === char ? 97 : 65; // a=97, A=65
Получаем код символа и определяем базу так же, как и в функции шифрования.
                return String.fromCharCode(((code - base - shift + 26) % 26) + base);
Рассчитываем новый код для расшифровки:
Вычитаем базовый код и значение сдвига (code - base - shift).
Добавляем 26 перед применением оператора остатка для обеспечения положительного результата.
Восстанавливаем окончательный код символа и преобразуем его обратно в символ.
            }
            return char; // Не изменяем символы, не относящиеся к алфавиту
        }).join('');
Если текущий символ не является буквой, возвращаем его без изменений. После обработки всех символов объединяем их обратно в строку.
        possibleDecryptedTexts.push({ shift, decryptedText });
Сохраняем объект с текущим значением сдвига и расшифрованным текстом в массив possibleDecryptedTexts.
    }
    return possibleDecryptedTexts;
}
После завершения цикла возвращаем массив всех возможных расшифрованных текстов.
Пример использования
const originalText = "Hello, World!";
const shiftKey = 3;
Определяем исходный текст и ключ для шифрования.
// Шифруем текст
const encryptedText = caesarEncrypt(originalText, shiftKey);
console.log("Зашифрованный текст:", encryptedText);
Вызываем функцию шифрования и выводим зашифрованный текст на консоль.
// Дешифруем текст с подбором ключа
const decryptedOptions = caesarDecryptWithBruteForce(encryptedText);
decryptedOptions.forEach(option => {
    console.log(`Сдвиг ${option.shift}: ${option.decryptedText}`);
});
Вызываем функцию дешифровки и выводим все возможные расшифрованные тексты вместе с соответствующими значениями сдвига на консоль.
Таким образом, здесь реализован шифр Цезаря, который позволяет как зашифровывать текст с заданным ключом, так и подбирать ключ для расшифровки.
