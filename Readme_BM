function searchUsingBoyerMoore(text, pattern) {
Объявление функции: Мы определяем функцию searchUsingBoyerMoore, которая принимает два параметра: text (строка, в которой будем искать) и pattern (шаблон, который ищем).
    const textLength = text.length;
    const patternLength = pattern.length;
Определение длины строк: Мы сохраняем длину текста и шаблона в переменные textLength и patternLength соответственно. Это нужно для упрощения дальнейших вычислений.
    const createBadCharTable = (pattern) => {
Создание функции для таблицы плохих символов: Мы объявляем стрелочную функцию createBadCharTable, которая будет создавать таблицу плохих символов для заданного шаблона.
        const badCharTable = {};
Инициализация таблицы: Создаем пустой объект badCharTable, который будет хранить индексы символов шаблона.
        for (let index = 0; index < pattern.length; index++) {
            badCharTable[pattern[index]] = index;
        }
Заполнение таблицы: В цикле мы проходим по каждому символу шаблона и добавляем его в таблицу с соответствующим индексом. Если символ повторяется, будет сохранен только последний индекс.
        return badCharTable;
    };
Возврат таблицы: Функция возвращает заполненную таблицу плохих символов.
    const calculateGoodSuffixShift = (pattern, l) => {
Создание функции для вычисления сдвига по хорошему суффиксу: Мы объявляем еще одну стрелочную функцию calculateGoodSuffixShift, которая принимает шаблон и длину совпавшего суффикса l.
        const m = pattern.length;
        const extendedPattern = '*'.repeat(m) + pattern;
Инициализация переменных: Сохраняем длину шаблона в переменной m и создаем расширенный шаблон, который состоит из звездочек и самого шаблона. Это нужно для дальнейших вычислений.
        const findRpr = (l, pattern) => {
Вложенная функция для поиска: Объявляем вложенную функцию findRpr, которая будет находить значение k для хорошего суффикса.
            for (let k = m - l; k >= -m + 1; k--) {
Цикл для поиска совпадений: Мы проходим по диапазону от m - l до -m + 1, чтобы найти совпадения между сегментами расширенного шаблона и суффиксом оригинального шаблона.
                const segment = extendedPattern.slice(k + m, k + m + l);
                const suffix = pattern.slice(m - l);
Извлечение сегмента и суффикса: Извлекаем сегмент из расширенного шаблона и суффикс из оригинального шаблона.
                if (
                    segment === suffix &&
                    (k <= 0 || pattern[k - 1] !== pattern[m - l - 1])
                ) {
                    return k;
                }
            }
Проверка совпадений: Если сегмент совпадает с суффиксом и выполняется условие на границе, возвращаем значение k. Это значит, что мы нашли подходящий сдвиг.
            return -m + 1;
        };
Возврат значения по умолчанию: Если совпадений не найдено, возвращаем значение по умолчанию.
        const k = findRpr(l, pattern);
        return m - k - l + 1;
    };
Вычисление сдвига: Вызываем функцию findRpr для нахождения значения k и вычисляем окончательный сдвиг по хорошему суффиксу.
    const badCharTable = createBadCharTable(pattern);
    const matches = [];
Создание таблицы плохих символов и массива для совпадений: Создаем таблицу плохих символов с помощью ранее определенной функции и инициализируем массив matches, который будет хранить найденные позиции совпадений.
    let shift = 0; // Текущее смещение шаблона
Инициализация смещения: Устанавливаем начальное смещение в 0. Это будет указывать на текущую позицию в тексте.
    while (shift <= textLength - patternLength) {
Цикл поиска совпадений: Запускаем цикл, который продолжает выполняться, пока смещение меньше или равно разнице между длиной текста и длиной шаблона. Это гарантирует, что мы не выйдем за пределы текста.
        let j = patternLength - 1;
Инициализация индекса j: Устанавливаем j на последний индекс шаблона. Мы будем сравнивать символы с конца.
        while (j >= 0 && pattern[j] === text[shift + j]) {
            j--;
        }
Сравнение символов: Запускаем внутренний цикл, который сравнивает символы шаблона с соответствующими символами текста справа налево. Если они совпадают, уменьшаем j.
        if (j < 0) { // Если совпадение найдено
            matches.push(shift);
            shift += patternLength; // Переход к следующему возможному совпадению
Обработка найденного совпадения: Если j становится меньше 0, это означает, что найдено полное совпадение.
Мы добавляем текущее смещение в массив matches и увеличиваем смещение на длину шаблона для перехода к следующему возможному совпадению.
        } else {
            let l = 0;
            while (l < patternLength && text[shift + patternLength - 1 - l] === pattern[patternLength - 1 - l]) {
                l++;
            }
Обработка несовпадающего случая: Если j не меньше 0, мы вычисляем длину совпавшего суффикса l. Для этого запускаем цикл, который сравнивает символы текста и шаблона справа налево до тех пор, пока они совпадают.
            const badCharShift = j - (badCharTable[text[shift + j]] || -1);
            const goodSuffixShift = l > 0 ? calculateGoodSuffixShift(pattern, l) : 1;
Вычисление сдвигов: Вычисляем сдвиг по плохому символу (badCharShift) и по хорошему суффиксу (goodSuffixShift). Для плохого символа используем значение из таблицы или -1, если символа нет в таблице.
Для хорошего суффикса вызываем соответствующую функцию только если l больше 0.
            shift += Math.max(goodSuffixShift, badCharShift);
        }
    }
Обновление смещения: Увеличиваем смещение на максимальный из двух вычисленных сдвигов. Это позволяет эффективно пропускать части текста при поиске следующего возможного совпадения.
    return matches;
}
Возврат результата: В конце функции возвращаем массив matches, содержащий все позиции найденных совпадений.
Пример использования:
const sampleText = "abccabcbbccabcdabcdabc";
const samplePattern = "abc";
const foundPositions = searchUsingBoyerMoore(sampleText, samplePattern);
console.log("Найденные позиции:", foundPositions);
Здесь мы определяем текст и шаблон для поиска. Затем вызываем нашу функцию и выводим найденные позиции на экран.
Таким образом, код реализует алгоритм Бойера-Мура для поиска подстроки в строке эффективно благодаря использованию таблиц плохих символов и хороших суффиксов.
