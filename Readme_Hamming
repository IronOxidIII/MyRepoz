Функция для вычисления контрольных битов и кодирования данных
Определение функции
function calculateParityBits(data) {
Объявляется функция calculateParityBits, которая принимает строку data, представляющую двоичные данные (например, '1011').
Инициализация переменных
    const m = data.length; // Количество бит данных
    let r = 0; // Инициализация количества контрольных битов
m — это длина входной строки data, то есть количество бит данных.
r — переменная для хранения количества контрольных битов, инициализируется нулем.
Вычисление количества контрольных битов
    while (Math.pow(2, r) < m + r + 1) {
        r++;
    }
Цикл while продолжает увеличивать r, пока 2^r меньше, чем сумма количества бит данных m и количества контрольных битов r плюс 1. Это условие гарантирует, что у нас будет достаточно контрольных битов для исправления ошибок.
Общее количество битов
    const totalBits = m + r; // Общее количество битов (данные + контрольные биты)
Переменная totalBits хранит общее количество битов, которое равно сумме данных и контрольных битов.
Инициализация массива для кода Хэмминга
    const hammingCode = new Array(totalBits).fill(0); // Инициализация массива для кода Хэмминга
Создается массив hammingCode, размером totalBits, который изначально заполняется нулями. Этот массив будет использоваться для хранения закодированных данных и контрольных битов.
Заполнение массива данными
    let j = 0;
    for (let i = 0; i < totalBits; i++) {
        if (Math.pow(2, j) === i + 1) {
            j++; // Пропускаем позиции для контрольных битов
        } else {
            hammingCode[i] = data[j - 1]; // Заполняем данные
            j++;
        }
    }
Переменная j используется для отслеживания индекса в исходных данных.
Цикл for проходит по всем позициям в массиве hammingCode.
Если текущая позиция является степенью двойки (то есть позиция для контрольного бита), индекс j увеличивается.
В противном случае текущая позиция заполняется значением из исходных данных.
Вычисление контрольных битов
    for (let i = 0; i < r; i++) {
        const parityPosition = Math.pow(2, i);
        let parityValue = 0;

        for (let j = parityPosition - 1; j < totalBits; j += parityPosition * 2) {
            for (let k = j; k < Math.min(j + parityPosition, totalBits); k++) {
                parityValue ^= hammingCode[k]; // Вычисление значения контрольного бита
            }
        }
        
        hammingCode[parityPosition - 1] = parityValue; // Установка контрольного бита в массив
    }
Внешний цикл проходит по всем контрольным битам (r).
Для каждого контрольного бита:
Определяется его позиция (parityPosition), которая является степенью двойки.
Переменная parityValue инициализируется нулем.
Внутренний цикл проходит по всем элементам массива с шагом, равным удвоенной позиции контрольного бита. Он использует XOR (^=) для вычисления значения контрольного бита, комбинируя значения из массива hammingCode.
После завершения внутренних циклов значение контрольного бита сохраняется в соответствующей позиции массива.
Возврат закодированного Хэмминг-кода
    return hammingCode.join(''); // Возвращаем код Хэмминга как строку
}
Функция возвращает закодированный Хэмминг-код в виде строки.
Функция для декодирования и исправления ошибок
Определение функции
function decodeHammingCode(hammingCode) {
Объявляется функция decodeHammingCode, которая принимает строку hammingCode, представляющую закодированные данные.
Инициализация переменных
    const n = hammingCode.length; // Длина кода Хэмминга
    const r = Math.floor(Math.log2(n + 1)); // Количество контрольных битов

    let errorPosition = 0;
Переменная n хранит длину входной строки Хэмминга.
Переменная r вычисляет количество контрольных битов на основе длины кода.
Переменная errorPosition инициализируется нулем и будет использоваться для отслеживания позиции ошибки.
Проверка контрольных битов
    for (let i = 0; i < r; i++) {
        const parityPosition = Math.pow(2, i);
        let parityValue = 0;

        for (let j = parityPosition - 1; j < n; j += parityPosition * 2) {
            for (let k = j; k < Math.min(j + parityPosition, n); k++) {
                parityValue ^= Number(hammingCode[k]); // Вычисление значения контрольного бита
            }
        }

        if (parityValue !== 0) {
            errorPosition += parityPosition; // Суммируем позиции ошибок
        }
    }
Внешний цикл проходит по всем контрольным битам (r).
Для каждого контрольного бита:
Определяется его позиция (parityPosition).
Переменная parityValue снова инициализируется нулем.
Внутренний цикл проверяет значения в массиве Хэмминга так же, как при вычислении контрольных битов. Если значение не равно нулю, это означает наличие ошибки в соответствующей позиции.
Исправление ошибок и извлечение оригинальных данных
    if (errorPosition > 0) {
        console.log(`Ошибка в позиции: ${errorPosition}`);
        hammingCode = hammingCode.split('');
        hammingCode[errorPosition - 1] ^= 1; // Исправляем ошибку
        hammingCode = hammingCode.join('');
    } else {
        console.log('Ошибок не найдено.');
    }

    // Извлечение оригинальных данных без контрольных битов
    const originalData = [];
    for (let i = 0, j = 0; i < n; i++) {
        if (Math.pow(2, j) === i + 1) {
            j++; // Пропускаем контрольные биты
        } else {
            originalData.push(hammingCode[i]);
        }
    }

    return originalData.join(''); // Возвращаем оригинальные данные как строку
}
Если была обнаружена ошибка (errorPosition > 0), выводится сообщение о позиции ошибки. Затем ошибка исправляется с помощью XOR.
Если ошибок не найдено, выводится соответствующее сообщение.
Далее происходит извлечение оригинальных данных из массива Хэмминга. Цикл проходит по всем позициям:
Если текущая позиция является степенью двойки (контрольный бит), она пропускается.
В противном случае значение добавляется в массив оригинальных данных.
Пример использования
Кодирование данных:
const inputData = '1011'; // Данные для кодирования
const hammingCode = calculateParityBits(inputData);
console.log('Код Хэмминга:', hammingCode);
Входные данные '1011' передаются в функцию кодирования. Закодированный Хэмминг-код выводится в консоль.
Декодирование данных:
const decodedData = decodeHammingCode(hammingCode);
console.log('Декодированные данные:', decodedData);
Закодированный Хэмминг-код декодируется с помощью функции декодирования, а результат выводится в консоль.
Заключение
Этот код реализует алгоритм кода Хэмминга для кодирования и исправления ошибок. Он включает следующие этапы:
Подсчет необходимого количества контрольных битов.
Кодирование данных с добавлением контрольных битов.
Проверка на наличие ошибок при декодировании.
Исправление обнаруженных ошибок и извлечение оригинальных данных.
