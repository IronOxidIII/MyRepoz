Этот код позволяет обнаруживать и исправлять ошибки в передаваемых данных.
Кодирование данных
Функция hammingCode
Проверка входных данных:
if (input.length !== 4 || !/^[01]+$/.test(input)) {
    throw new Error("Введите 4 бита (0 или 1).");
}
Проверяет, что входная строка содержит ровно 4 бита (0 или 1). Если нет, выбрасывает ошибку.
Преобразование строки в массив чисел:
let dataBits = input.split('').map(Number);
Разделяет строку на отдельные символы и преобразует их в массив чисел.
Добавление контрольных битов:
const parityBits = [
    (dataBits[0] + dataBits[2] + dataBits[3]) % 2, // P1
    (dataBits[1] + dataBits[2] + dataBits[3]) % 2, // P2
    (dataBits[0] + dataBits[1] + dataBits[3]) % 2  // P4
];
Вычисляет три контрольных бита (P1, P2 и P4) по определенным правилам, основанным на значениях данных.
Формирование закодированных данных:
return [
    parityBits[0], 
    parityBits[1], 
    dataBits[0], 
    parityBits[2], 
    dataBits[1], 
    dataBits[2], 
    dataBits[3]
];
Возвращает массив, который включает контрольные и данные в порядке: P1, P2, D1, P4, D2, D3.
Декодирование данных
Функция decodeHamming
Проверка закодированных данных:
if (encoded.length !== 7 || !/^[01]+$/.test(encoded.join(''))) {
    throw new Error("Введите 7 бит в закодированных данных.");
}
Убеждается, что входной массив содержит ровно 7 бит. В противном случае выбрасывает ошибку.
Проверка контрольных битов:
const p1 = (encoded[0] + encoded[2] + encoded[4] + encoded[6]) % 2; // Проверка P1
const p2 = (encoded[1] + encoded[2] + encoded[4] + encoded[6]) % 2; // Проверка P2
const p4 = (encoded[0] + encoded[1] + encoded[4] + encoded[6]) % 2; // Проверка P4
Вычисляет значения контрольных битов для проверки целостности данных.
Определение позиции ошибки:
const errorPosition = p1 * 1 + p2 * 2 + p4 * 4;
Определяет позицию ошибки на основе значений контрольных битов.
Исправление ошибки:
if (errorPosition > 0) {
    console.log(`Ошибка в позиции: ${errorPosition}`);
    encoded[errorPosition - 1] ^= 1; // Исправляем ошибку
} else {
    console.log("Ошибок не найдено.");
}
Если ошибка обнаружена, выводит ее позицию и исправляет бит с помощью операции XOR.
Извлечение оригинальных данных:
return [encoded[2], encoded[4], encoded[5], encoded[6]];
Возвращает массив с оригинальными данными D1, D2 и D3.
Пример использования
Кодирование и декодирование
try {
    const inputData = '1011'; // Исходные данные для кодирования
    const codedData = hammingCode(inputData);
    console.log('Закодированные данные:', codedData.join(''));
    
    // Для тестирования декодирования можно внести ошибку в закодированные данные
    // codedData[0] ^= 1; // Внесите ошибку для проверки декодирования

    const decodedData = decodeHamming(codedData);
    console.log('Декодированные данные:', decodedData.join(''));
} catch (error) {
    console.error(error.message);
}
Пример показывает, как использовать функции для кодирования исходных данных и последующего их декодирования.
Таким образом, данный код реализует алгоритм кода Хэмминга для обеспечения надежности передачи данных путем обнаружения и исправления одиночных ошибок.
