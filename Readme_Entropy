Объяснение кода
let ArgumentyKonsoli = process.argv;
Эта строка получает массив аргументов командной строки, переданных скрипту. process.argv — это встроенный массив в Node.js, который содержит аргументы командной строки.
Первый элемент — это путь к исполняемому файлу Node.js, второй — путь к скрипту, а последующие элементы — это аргументы, переданные скрипту.
let inputFile = ArgumentyKonsoli[2];
Здесь мы присваиваем переменной inputFile третий элемент массива ArgumentyKonsoli, который должен содержать путь к входному текстовому файлу (например, file.txt).
let Vvod = inputFile;
Переменная Vvod просто копирует значение inputFile. Это делается для проверки наличия значения файла.
if (Vvod) {
Проверяем, что переменная Vvod не является пустой или неопределенной. Если она существует, продолжаем выполнение кода.
    let testNaTxt = (inputFile.slice(-4) == '.txt');
Здесь мы проверяем, что файл имеет расширение .txt. Метод slice(-4) извлекает последние 4 символа строки inputFile, и мы сравниваем их с .txt.
    if (testNaTxt) {
Если файл имеет правильное расширение .txt, продолжаем выполнение кода.
        const fileSystem = require('fs');
Импортируем модуль fs (файловая система) для работы с файловой системой. Этот модуль позволяет читать и записывать файлы.
        let input = fileSystem.readFileSync(inputFile, 'utf8');
Читаем содержимое файла с помощью метода readFileSync. Содержимое файла будет храниться в переменной input, а кодировка файла указывается как utf8.
        let entropy = 0;
        let alph = new Object(); 
        let alphPower = 0;
        let inputLength = input.length;
Создаем переменные:
entropy инициализируется нулем и будет использоваться для хранения рассчитанной энтропии текста.
alph — объект для хранения частоты символов.
alphPower — счетчик уникальных символов.
inputLength содержит длину входной строки (количество символов).
        for (let i = 0; i < inputLength; i++) {
            if (alph[input.charAt(i)])
                alph[input.charAt(i)] += 1;
            else
                alph[input.charAt(i)] = 1;
        }
Этот цикл проходит по каждому символу входного текста:
Если символ уже существует в объекте alph, увеличиваем его счетчик на 1.
Если символ не найден, добавляем его в объект с начальным значением 1.
        for (let i in alph) {
            alphPower++;
            alph[i] /= inputLength;  
        }
В этом цикле мы проходим по всем уникальным символам в объекте alph:
Увеличиваем счетчик уникальных символов (alphPower).
Делим количество вхождений каждого символа на общую длину текста (inputLength), чтобы получить частоту каждого символа.
        if (alphPower > 1) {
            for (let i in alph)
                entropy -= alph[i] * Math.log(alph[i]);
            entropy /= Math.log(alphPower);
        }
Проверяем, есть ли более одного уникального символа. Если да:
Вычисляем энтропию по формуле: суммируем произведения частоты каждого символа на логарифм этой частоты и берем отрицательное значение.
Делим полученную сумму на логарифм количества уникальных символов (alphPower).
        console.log("Энтропия =", entropy);
        console.log("\nЧастотный алфавит");
        console.log(alph);
Выводим рассчитанную энтропию и частотный алфавит (частоты всех уникальных символов) в консоль.
    } else {
        console.log("Ошибка: это не txt!");
    }
Если файл не имеет расширение .txt, выводим сообщение об ошибке.
} else {
    console.log("Ошибка: Ввод не определён!");
}
Если переменная Vvod не определена или пуста, также выводим сообщение об ошибке.
Заключение
Этот код считывает текстовый файл, анализирует его содержимое для вычисления частоты появления каждого символа и рассчитывает энтропию текста.

Вычисление энтропии — это формула Шеннона, но вместо 2 мы используем мощность алфавита. Pi при этом это частота элемента.
Так как в js math.log() это натуральный логарифм, мы сначала делаем вычисление по формуле Шеннона, используя е как основание логарифма, а после всю получившуюся сумму делим на натуральный логарифм мощности алфавита.
